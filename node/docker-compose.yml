version: '3.7'

services:
  api:
    container_name: api
    restart: on-failure
    tty: true
    build:
      context: ./api
      dockerfile: ./docker/Dockerfile.dev
    env_file:
      - ./dev.env
    volumes:
      - ./api:/usr/src/app/
      - /usr/src/app/node_modules
    ports:
      - 4000:4000
    networks:
      - api
    depends_on:
      - database
      - elastic

  client:
    container_name: client
    restart: on-failure
    stdin_open: true
    build:
      context: ./client
      dockerfile: ./docker/Dockerfile.dev
    env_file:
      - ./dev.env
    volumes:
      - ./client:/usr/src/app/
      - /usr/src/app/node_modules
    ports:
      - 3000:3000

  database:
    container_name: database
    build:
      context: ./docker
      dockerfile: Dockerfile.postgres.dev
    restart: on-failure
    env_file:
      - ./dev.env
    volumes:
      - database-data:/var/lib/postgresql/data/
    networks:
      - api
    depends_on:
      - elastic

  adminer:
    image: adminer
    container_name: adminer
    restart: on-failure
    ports:
      - 8080:8080
    networks:
      - api

  elastic:
    image: elasticsearch:7.8.0
    container_name: elastic
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - api

  kibana:
    image: kibana:7.8.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
      ELASTICSEARCH_HOSTS: http://elastic:9200
    networks:
      - api

volumes:
  database-data:
    name: postgres-data
  elastic-data:
    name: elastic-data
    driver: local

networks:
  api:
    name: api
